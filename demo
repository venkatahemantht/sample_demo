name: one_click_depoyment

on:
 workflow_call:
   inputs:
     APP_NAME:
       required: true
       type: string
     TAG:    
       required: true
       type: string
     REGISTRY_URL:
       required: true
       type: string
     NAMESPACE:
       required: true
       type: string
       
   secrets:
     SONAR_TOKEN:
       required: true
     SONAR_HOST_URL:
       required: true
     TL_USERNAME:
       required: true
     TL_PASSWORD:
       required: true
     REGISTRY_USER:
       required: true
     REGISTRY_PWD:
       required: true
     PERSONAL_ACCESS_TOKEN:
       required: true
     KUBECONFIG:
       required: true
     VERACODEID:
       required: true
     VERACODEKEY:
       required: true  
       
     
env:
  APP_NAME: ${{ inputs.APP_NAME }}
  REGISTRY_URL: ${{ inputs.REGISTRY_URL }}
  NAMESPACE: ${{ inputs.NAMESPACE }}
  TAG: ${{ inputs.TAG }}
jobs:
  checkout_SCM:

    runs-on: [ linux ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          #cache: maven
      - name: Build with Maven Wrapper
        run: |
          mvn -B package  
      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: ./target/*/
  Sonarqube_Analyis:
    runs-on: [ linux ]
    needs: checkout_SCM
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          #cache: maven
      - name: Build and Sonar analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: |
          export GIT_COMMIT=`git rev-parse --short HEAD`
          echo ${GIT_COMMIT}
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report
          mvn sonar:sonar -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          pwd
          ls -ltrh

 
  Docker_build:
    runs-on: [ linux ]
    needs: Sonarqube_Analyis
    steps:
      - name: Download Artifact.
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
      - run: |
          echo "checking"
          docker build --tag ${{ env.REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.TAG }} .
      - uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: ./${{ env.REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.TAG }}
  Twistlock:
    runs-on: [ linux ]
    needs: Docker_build
    steps:
      - uses: albertsons/twistlock@main
        with:
          tl-username: ${{ secrets.TL_USERNAME }}
          tl-password: ${{ secrets.TL_PASSWORD }}
          tl-console-url: https://us-east1.cloud.twistlock.com/us-2-158288594
          docker-image: ${{ env.REGISTRY_URL }}/${{ inputs.APP_NAME }}:${{ inputs.TAG }}
         
      - name: Login to Docker registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }}
     
      - run: |
          docker push ${{ env.REGISTRY_URL }}/${{ env.APP_NAME }}:${{ env.TAG }}
  CD_AKS:
    runs-on: [ linux ]
    needs: Twistlock
    steps:  
      - uses: albertsons/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}          
      - uses: albertsons/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_URL }}
          container-registry-username: ${{ secrets.REGISTRY_USER }}
          container-registry-password: ${{ secrets.REGISTRY_PWD }}
          secret-name: registry-secret
          namespace: ${{ env.NAMESPACE }}
      - run: helm template --name-template=workflow-poc helmcharts -f helmcharts/env/dev/values.yaml --set app.namespace=${{ env.NAMESPACE }} --set app.containers.tag=${{ env.TAG }} > dev-manifests.yaml      
      - uses: albertsons/k8s-deploy@v1
        with:
          manifests: |
            dev-manifests.yaml
          images: |
            ${{ env.REGISTRY_URL }}/${{ inputs.APP_NAME }}:${{ inputs.TAG }}
          imagepullsecrets: |
            registry-secret
          namespace: ${{ env.NAMESPACE }}
